# PyWAD is open-source software and consists of a set of plugins written in python for the WAD-Software medical physics quality control software. 
# The WAD Software can be found on https://github.com/wadqc
# 
# The pywad package includes plugins for the automated analysis of QC images for various imaging modalities. 
# PyWAD has been originaly initiated by Dennis Dickerscheid (AZN), Arnold Schilham (UMCU), Rob van Rooij (UMCU) and Tim de Wit (AMC) 
#
#
# Changelog:
#
#
# Description of this plugin:
# This plugin parses the dailyqc report generated by Philips gemini TOF PET-CT scanner
# 


__version__='01062015'
__author__ = 'DD,tdw'


import sys,re
from pdfminer import pdfpage
from pyWAD.plugindata import PluginData
from pyWAD.pluginresults import PluginResults
from pyWADLib import dumppdf
import itertools
import xml.etree.ElementTree as ET
import dicom

def parse_PET_dailyqc(data, results, **kwargs):
    '''
    Function receives PET dailyQC report and parses pdf file.
    Workflow:
    1) open instance from data class object
    2) obtain the encapsulated pdf document and parse it using analyse_pdf function
    3) write results to WAD software
    '''
    dcmlist=data.getAllInstances()
    if len(dcmlist) > 1:
        print "only one instance supported!"
        sys.exit()


    dicomobject = dcmlist[0]

    pdf = dicomobject.EncapsulatedDocument

    results_pdf = analyse_pdf(pdf)
    

    level1keys = ['Hardware Sensors','PMT Gain Calibration','Energy Test','Emission Test']

    for key in level1keys:
        results.addChar(key, results_pdf[key], level=1)


    level2charkeys = ['Tilt %s result'%(str(i)) for i in range(-3,4)]

    level2charkeys.append('Energy Window')
    level2charkeys.append('Start Time')
    level2charkeys.append('Start Time')


    for key in sorted(results_pdf.keys()):
        if key not in level1keys:

            if key in level2charkeys:
                results.addChar(key, results_pdf[key], level=2)

            else:
                results.addFloat(key, results_pdf[key], level=2)




def analyse_pdf(pdf):
    '''
    Function receives pdf and searches for specific QC report entries
    '''

    pdfdata = {}

    ## LEVEL 1

    match = re.findall(r'Start Time:(\W.*?)\)',pdf)
    print "Start Time", match
    pdfdata['Start Time'] = match[0].strip()

    match = re.findall(r'Hardware Sensors:(\W.*?)\)',pdf)
    pdfdata['Hardware Sensors'] = match[0].strip()

    match = re.findall(r'PMT Gain Calibration:(\W.*?)\)',pdf)
    pdfdata['PMT Gain Calibration'] = match[0].strip()

    match = re.findall(r'Energy Test:(\W.*?)\)',pdf)
    pdfdata['Energy Test'] = match[0].strip()

    match = re.findall(r'Energy Test:(\W.*?)\)',pdf)
    pdfdata['Emission Test'] = match[0].strip()


    ## LEVEL 2
    match = re.findall(r'Timing Resolution:(\W.*?)-ps',pdf)
    pdfdata['Timing Resolution'] = match[0].strip()

    match = re.findall(r'Calibration Resolution:(\W.*?)-ps',pdf)
    pdfdata['Calibration Resolution'] = match[0].strip()

    match = re.findall(r'Iterations:(\W.*?)\[',pdf)
    print "PMT Gain Iterations", match
    pdfdata['PMT Gain Iterations'] = match[0].strip()

    match = re.findall(r'Avg Error:(\W.*?)%',pdf)
    pdfdata['PMT Avg Error'] = match[0].strip()

    match = re.findall(r'Max Error:(\W.*?)%',pdf)
    pdfdata['PMT Max Error'] = match[0].strip()

    match = re.findall(r'Execution Time:(\W.*?)\)',pdf)
    pdfdata['Execution Time'] = match[0].strip().replace('-minutes','')


    match = re.findall(r'Energy Window:(\W.*?)\)',pdf)
    pdfdata['Energy Window'] = match[0].strip()

    match = re.findall(r'\|(\W.*?)\)',pdf)
    for i,elem in enumerate(match):
        print '--',i,elem

    Linearity_index = [i for i,elem in enumerate(match) if re.search('Linearity',elem)][0]
    Energy_index    = [i for i,elem in enumerate(match) if re.search('Centroid',elem)][0]

    for i in range(-3,4):
        tmp = match[Linearity_index+5+i].split('|')

        print "-----",i,tmp


        pdfdata['Tilt %s result'%(str(i))] = str(tmp[1].strip())
        
        pdfdata['Tilt %s linearity'%(str(i))] = str(tmp[0].strip())


    pdfdata['Energy Avg'] = match[Energy_index+1].split('|')[1].strip().replace('%','')
    pdfdata['Energy Min'] = match[Energy_index+2].split('|')[1].strip().replace('%','')
    pdfdata['Energy Max'] = match[Energy_index+3].split('|')[1].strip().replace('%','')

    pdfdata['Energy Avg-Centroid'] = match[Energy_index+1].split('|')[0].strip()
    pdfdata['Energy Min-Centroid'] = match[Energy_index+2].split('|')[0].strip()
    pdfdata['Energy Max-Centroid'] = match[Energy_index+3].split('|')[0].strip()


    ## Delete dumped pdf

                                         
    for key in pdfdata.keys():
        "----",key,pdfdata[key]

    return pdfdata



def main():
    return


if __name__ == '__main__': sys.exit(main())
