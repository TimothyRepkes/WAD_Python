# -*- coding: utf-8 -*-

"""
Test script that creates an empty dicom file and stores results
(normally obtained from http-post, or some utility/script) in private tag (0071,9999)
A structure of the following form should be stored in this tag (also see "post" below):
{
  'Description' : [
       {
        'type' : 'float',
        'description' : '',
        'value' : '',
        'level' : 1,
        'quantity' : '',
        'units' : '',
       },
       {
        'type' : 'char',
        'description' : '',
        'value' : '',
        'level' : 1,
        'quantity' : '',
        'units' : '',
       },
       {
        'type' : 'bool',
        'description' : '',
        'value' : '',
        'level' : 1,
        'quantity' : '',
        'units' : '',
       },
       {
        'type' : 'object',
        'description' : '',
        'level' : 1,
        'quantity' : '',
        'units' : '',
        'filename' : '',
        'base64_blob' : 'PUTBASE64BLOBHERE'
       }      
  ]
}
where there can be any number of sub-dictionaries of the supported WAD types
FIXME: check bool value!
"""


import os, sys
import dicom
from dicom.dataset import Dataset, FileDataset
import numpy as np
from ast import literal_eval
import time


# globals

private_tag=(0x0071,0x9999)
PatientID = '1234567'
PatientName = 'Gammaprobe QC'
StudyDescription = 'EuroProbeII'
SeriesDescription = 'Gammaprobe meting'



def create_dicom(private_tag,payload,filename):
    """ Function creates minimal dicom file from scratch with required tags
        and stores payload (string) in the specified private tag.
    """

    # create empty dicomfile
    file_meta = Dataset()

    # Raw Data Storage
    file_meta.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.66'

    # unieke uid's
    file_meta.MediaStorageSOPInstanceUID = dicom.UID.generate_uid()
    file_meta.ImplementationClassUID = dicom.UID.generate_uid()

    ds = FileDataset(filename, {},file_meta = file_meta,preamble="\0"*128)

    ds.SOPClassUID = '1.2.840.10008.5.1.4.1.1.7' # secondary capture SOP UID
    ds.SOPInstanceUID = file_meta.MediaStorageSOPInstanceUID
    ds.StudyInstanceUID = dicom.UID.generate_uid()
    ds.SeriesInstanceUID = dicom.UID.generate_uid()

    ds.PatientID = PatientID
    ds.PatientName = PatientName
    ds.StudyDescription = StudyDescription
    ds.SeriesDescription = SeriesDescription
    ds.Modality = 'OT'
    ds.StudyDate = time.strftime('%Y%m%d')
    ds.SeriesDate = ds.StudyDate
    ds.ContentDate = ds.StudyDate
    ds.StudyTime = ds.SeriesTime = ds.ContentTime = time.strftime('%H%M%S')

    ds.add_new(private_tag,'OB', payload)

    ds.save_as(filename)





'''
# open binary file and convert to base64 string
#  linux commandline/bash script :   base64  (coreutils)
#  java, c++ : numerous existing libraries
file = open('test.png','rb')
filedata = file.read()
fileblob = filedata.encode("base64")
'''

# string normally generated by some utility, php-code, or script:
payload = """
{ 'grote gammaprobe' : [
       { 
        'type' : 'float',
        'description' : 'counts',
        'value' : '13463',
        'level' : 1,
        'quantity' : '',
        'units' : 'counts/10s',
       },
       { 
        'type' : 'char',
        'description' : 'measurement_time',
        'value' : '22-01-2015 12:45',
        'level' : 1,
        'quantity' : '',
        'units' : '',
       },
      { 
        'type' : 'char',
        'description' : 'calibration_time',
        'value' : '01-01-2015 13:00',
        'level' : 1,
        'quantity' : '',
        'units' : '',
       },
       { 
        'type' : 'float',
        'description' : 'calibration_dose Co-57',
        'value' : '200',
        'level' : 1,
        'quantity' : 'activity',
        'units' : 'kBq',
       },
       { 
        'type' : 'float',
        'description' : 'sensitivity',
        'value' : '23.56',
        'level' : 1,
        'quantity' : '',
        'units' : 'cps/kBq',
       },
       { 
        'type' : 'object',
        'description' : 'screenshot',
        'level' : 1,
        'quantity' : '',
        'units' : '',
        'filename' : 'test.png',
        'base64_blob' : 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAACjSURBVDjL7ZNBCsIwEEVz1mwTo1YjiHdI
qyWgFBGPonWTC8T2BjlE4JsUwU0ILe7ExUtgPvNmNkMAkG8gPyAwxiAHYwxKKUgpk/kg8N5n4Zwn
6865j4CVLXj1AA//rArsW4hAzCil4wTFsUdx6rBuLLaXJ+aH+zTBqukDFpuzxe5qsagnCIbV32vH
ybF5Wd/GC3JkBfHJEZu11hBCJHPyvwXyAt6tONifnq6xAAAAAElFTkSuQmCC'
       },
  ]
}
"""





# create empty dicomfile and write "payload" to private tag

create_dicom(private_tag,payload,"test.dcm")

