import os
from pyWAD.xml_result_generator import getXMLFromResult
from pyWAD.xml_parser import parseInput, parseConfig
from pyWAD.plugindata import PluginData
from pyWAD.pluginresults import PluginResults


def pluginWrapper(input_filename):
    """Evaluate required plugins and write results to XML.

    1. Read the input XML (generated by the WAD server)
    2. Read the config file which is specified in the input XML
    3. For each action specified in the config file:
        - Import the plugin function belonging to the action
        - Initiate Data and Results objects from plugintools
        - Evaluate the plugin function (which adds results to
          the PluginTools object
        - Convert the results of the action to XML format
    4. Write XML file
    """

    # Read input XML -> contains the reference to the config XML and the DICOM 
    # data to be analyzed. This file is added as an argument to the function 
    # call by the WAD selector.
    wadinput = parseInput(input_filename)

    # Read the config XML -> describes the actions to be applied to the DICOM
    # files. Each action specifies a function in a plugin module and optionally
    # default_level, filters, limits and params.
    action_list = parseConfig(wadinput['analysemodule_cfg'])

    # Change current working directory. This allows the plugin to save objects
    # without the need to specify the path to the result directory.
    os.chdir(os.path.dirname(wadinput['analysemodule_output']))

    result_xml_list = []
    for action in action_list:
        # Import plugin function
        module = __import__(action['plugin'], fromlist=[action['function']])
        function = getattr(module, action['function'])
        
        # Get plugin version
        version = "%s (%s)"%(module.__version__, action['plugin'])

        # Initiate objects
        plugin_data = PluginData(wadinput['serieslist'], action['filters'])
        plugin_results = PluginResults(action['default_level'])

        # Evaluate function
        print("----- Evaluating {} in {} -----".format(
            action['function'], action['plugin']))
        function(plugin_data, plugin_results, params=action['params'])

        # Report plugin version
        if plugin_results:
            plugin_results.addChar("Version", version, level=2)

        # Convert results to XML
        for result in plugin_results:
            result_xml_list.append(getXMLFromResult(result, action['limits']))
            print(result)

    if result_xml_list:
        outXML = '\n'.join(['<WAD>'] + result_xml_list + ['</WAD>'])
        with open(wadinput['analysemodule_output'], 'w') as f:
            f.write(outXML)
